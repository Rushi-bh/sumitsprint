package com.magicbricks.steps;

import java.awt.AWTException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;

import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.magicbricks.pages.HomePage;
import com.magicbricks.pages.PackersAndMoversPage;
import com.magicbricks.pages.PropertyServicesPage;
import com.magicbricks.utils.Utils;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class PackersAndMoversSteps extends BaseSteps {

	private HomePage homePage;
	private PropertyServicesPage propertyServicesPage;
	private PackersAndMoversPage packersAndMoversPage;

//	scenario - 1
	@Given("user is on Home Page")
	public void user_is_on_home_page() throws InterruptedException {
		homePage = new HomePage(driver);
		
	}
	@When("clicks on property services")
	public void clicks_on_property_services() throws InterruptedException {
		Thread.sleep(5000);
		homePage.viewPropertyServices();
		
	}
	@When("selects view all services")
	public void selects_view_all_services() {
		propertyServicesPage = homePage.viewAllServices();
	}
	@Then("user is redirected to property services page")
	public void user_is_redirected_to_property_services_page() throws InterruptedException {
		// switching to property service window
		String parentHandle = driver.getWindowHandle();

		for (String handle : driver.getWindowHandles()) {
			if (!handle.equals(parentHandle))
				driver.switchTo().window(handle);
			else
				driver.close();
		}
		// validating if user is on property service page
		Thread.sleep(1000);
		String title = propertyServicesPage.ele_title.getText();
		Assert.assertEquals("Property Services", title);
		
	}

//	scenario - 2
	@Given("user is on property services page")
	public void user_is_on_property_services_page() throws InterruptedException, IOException {
		driver.get("https://www.magicbricks.com/property-services/?inc=GNB_PS");
		propertyServicesPage = new PropertyServicesPage(driver);
		propertyServicesPage.hoverAll();
		
	}
	@When("clicks on packers & movers link")
	public void clicks_on_packers_movers_link() {
		packersAndMoversPage =  propertyServicesPage.viewPackers();
	}
	@When("user provides {string} and {string}")
	public void user_provides_and(String sheetNumber, String rowNumber) throws IOException {
		//switching to packers and movers window
		String parentHandle = driver.getWindowHandle();
		for (String handle : driver.getWindowHandles()) {
			if (!handle.equals(parentHandle))
				driver.switchTo().window(handle);
			else
				driver.close();
		}
		
		//reading data from excel sheet
		File file = new File("excelData/userInformation.xlsx");
		FileInputStream fileInputStream = new FileInputStream(file);
		Workbook workbook = new XSSFWorkbook(fileInputStream);
		Sheet sheet = workbook.getSheetAt(Integer.parseInt(sheetNumber));
		
		String cityName = sheet.getRow(Integer.parseInt(rowNumber)).getCell(0) + "";
		String contactNumber = sheet.getRow(Integer.parseInt(rowNumber)).getCell(1) + " ";
		
		packersAndMoversPage.setCity(cityName);
		packersAndMoversPage.setContact(contactNumber);

	}
	@When("clicks on check prices")
	public void clicks_on_check_prices() throws InterruptedException{
		packersAndMoversPage.submit_details();
		Thread.sleep(10000);
		
		
	}
	@Then("user verified successfully")
	public void user_verified_successfully() {
	    
	}
	
//	scenario - 3
	@Given("user is on pick up details page")
	public void user_is_on_pick_up_details_page() {
		driver.get("https://www.magicbricks.com/propertyservices/packers-movers-within-city-movement-details/F23AC78778F08ED7FDD9832DD1D2079D?inc=propservices_homepage_topicon");
		packersAndMoversPage = new PackersAndMoversPage(driver);
	}
	@When("user provide {string} , {string}")
	public void user_provide(String homeSize, String days) throws InterruptedException {
	   packersAndMoversPage.selectFlatType(homeSize);
	   Thread.sleep(1000);
	   packersAndMoversPage.selectDate(Integer.parseInt(days));
	}
	@When("{string} , {string} locations")
	public void locations(String source, String destination) throws InterruptedException {
		packersAndMoversPage.setMovingFrom(source);
		packersAndMoversPage.setMovingTo(destination);
	}
	@When("provide additional pickup details and clicks on proceed")
	public void provide_additional_pickup_details_and_clicks_on_proceed() throws InterruptedException, AWTException {
		packersAndMoversPage.setLiftFrom();
		packersAndMoversPage.setliftTo("4");
		packersAndMoversPage.clickNext();
		Thread.sleep(2000);
		packersAndMoversPage.scroll(4);
		Thread.sleep(2000);
		packersAndMoversPage.clickNext();
	}
	@Then("user has hired packers and movers successfully")
	public void user_has_hired_packers_and_movers_successfully() throws InterruptedException {
		Thread.sleep(1000);
	    packersAndMoversPage.clickProceed();
	    Thread.sleep(2000);
	    String marketPrice = driver.findElement(By.id("marketPrice")).getText();
	    System.out.println(marketPrice);
	    String discount = driver.findElement(By.id("earlyBirdDiscount")).getText();
	    System.out.println(discount);
	    String actualAmount = driver.findElement(By.id("movementQuote")).getText();
	    String expectedAmount = "â‚¹" + (int)(Double.parseDouble(marketPrice.substring(1,marketPrice.length())) - Double.parseDouble(discount.substring(2,discount.length())));
	    System.out.println(actualAmount);
	    System.out.println(expectedAmount);
	    Assert.assertEquals(actualAmount, expectedAmount);
	}
	
//	scenario - 4
	@Given("user is on Packers and Movers page")
	public void user_is_on_packers_and_movers_page() {
		driver.get("https://www.magicbricks.com/propertyservices/packers-and-movers/?inc=desktop_pnm_hamburger");
		System.out.println(driver.getCurrentUrl());
		packersAndMoversPage = new PackersAndMoversPage(driver);
	}
	@When("user select between cities option")
	public void user_select_between_cities_option() throws InterruptedException {
		Thread.sleep(1000);
		packersAndMoversPage.selectBetweenCities();
	}
	@When("enters {string} and {string} cities")
	public void enters_and_cities(String source, String destination) throws InterruptedException {
		packersAndMoversPage.selectSourceCity(source);
		packersAndMoversPage.selectDestinationCity(destination);
	}
	@When("user provide valid {string}")
	public void user_provide_valid(String contact) {
		packersAndMoversPage.setContact(contact);
	}
	@When("user clicks on check prices")
	public void user_clicks_on_check_prices() {
		packersAndMoversPage.checkPricesBetweenCities();
	}
	@Then("user receive otp successfully")
	public void user_receive_otp_successfully() {
	}
	
//	scenario - 5
	@When("enters invalid {string} and {string} cities")
	public void enters_invalid_and_cities(String source, String destination) throws InterruptedException {
		packersAndMoversPage.selectSourceCity(source);
		packersAndMoversPage.selectDestinationCity(destination);
	}
	@When("user provide invalid {string}")
	public void user_provide_invalid(String contact) {
		packersAndMoversPage.setContact(contact);
	}
	@Then("user failed to check prices")
	public void user_failed_to_check_prices() {
	   String actualErrorTo = driver.findElement(By.id("pnm-movingto-error-message")).getText();
	   String actualErrorMobile = driver.findElement(By.id("pnm-mobile-error-message")).getText();
	   
	   System.out.println(actualErrorMobile + "    " + actualErrorTo);
	   
//	   Assert.assertEquals(actualErrorTo, "Moving from and to cities can not be same");
//	   Assert.assertEquals(actualErrorMobile, "Mobile no. should be 10 digits");
	   packersAndMoversPage.assertEquals(actualErrorTo, actualErrorMobile);
	   tearDown();
	}





}
